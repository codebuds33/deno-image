apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "3"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"deployment.kubernetes.io/revision":"1"},"generation":1,"labels":{"app":"deno-webserver"},"name":"deno-webserver","namespace":"default","uid":"04a746c4-41a1-4ad3-9256-caa0176da61b"},"spec":{"progressDeadlineSeconds":600,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app":"deno-webserver"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"},"type":"RollingUpdate"},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"deno-webserver"}},"spec":{"containers":[{"image":"codebuds/deno-webserver:latest","imagePullPolicy":"Always","name":"deno-webserver","resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{},"terminationGracePeriodSeconds":30}}},"status":{"availableReplicas":1,"conditions":[{"lastTransitionTime":"2022-03-13T17:52:08Z","lastUpdateTime":"2022-03-13T17:52:08Z","message":"Deployment has minimum availability.","reason":"MinimumReplicasAvailable","status":"True","type":"Available"},{"lastTransitionTime":"2022-03-13T17:52:00Z","lastUpdateTime":"2022-03-13T17:52:08Z","message":"ReplicaSet \"deno-webserver-7d4999f6cf\" has successfully progressed.","reason":"NewReplicaSetAvailable","status":"True","type":"Progressing"}],"observedGeneration":1,"readyReplicas":1,"replicas":1,"updatedReplicas":1}}
  labels:
    app: deno-webserver
  name: deno-webserver
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: deno-webserver
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: deno-webserver
    spec:
      containers:
      - image: deno-webserver:local
        imagePullPolicy: Never
        name: deno-webserver
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - mountPath: /srv/app/pvc
            name: logs

      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: logs
          persistentVolumeClaim:
            claimName: logs
        - name: maria-db
          persistentVolumeClaim:
            claimName: maria-db

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: deno-server
spec:
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  capacity:
    storage: 10Gi
  hostPath:
    path: /data/deno-server/

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
